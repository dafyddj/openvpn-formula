# -*- coding: utf-8 -*-
# vim: ft=yaml
---
## Machine config
os: windows
language: bash

env:
  - machine_user=kitchen machine_pass=Pass@word1 machine_port=5985 KITCHEN_LOCAL_YAML=kitchen.github.yml

## Script to run for the test stage
script:
  - systeminfo
  - whoami
  - powershell -NonInteractive -Command "& { \$password = ConvertTo-SecureString $machine_pass -AsPlainText -Force; New-LocalUser $machine_user -Password \$password }"
  - powershell -NonInteractive -Command Add-LocalGroupMember -Group Administrators -Member $machine_user
  - net localgroup Administrators
  - gem install bundler --quiet --no-document
  - choco list -l
  - choco install msys2
  - ridk.cmd exec pacman -S --noconfirm --needed base-devel mingw-w64-x86_64-toolchain
  - bundle config path vendor/bundle
  - bundle install --jobs 4 --retry 3
  - bundle exec kitchen verify

# before_install:
# - |-
#     case $TRAVIS_OS_NAME in
#       windows)
#         [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
#         choco uninstall -y mingw
#         choco upgrade --no-progress -y msys2
#         export msys2='cmd //C RefreshEnv.cmd '
#         export msys2+='& set MSYS=winsymlinks:nativestrict '
#         export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
#         export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
#         export msys2+=" -msys2 -c "\"\$@"\" --"
#         $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain
#         ## Install more MSYS2 packages from https://packages.msys2.org/base here
#         taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
#         export PATH=/C/tools/msys64/mingw64/bin:$PATH
#         export MAKE=mingw32-make  # so that Autotools can find it
#         ;;
#     esac
# 
# before_cache:
# - |-
#     case $TRAVIS_OS_NAME in
#       windows)
#         # https://unix.stackexchange.com/a/137322/107554
#         $msys2 pacman --sync --clean --noconfirm
#         ;;
#     esac
# 
cache:
    directories:
    - $HOME/AppData/Local/Temp/chocolatey
    - /C/tools/msys64
# # Stages and jobs matrix
# stages:
#   - test
#   - name: 'release'
#     if: 'branch = master AND type != pull_request'
# jobs:
#   include:
#     ## Define the test stage that runs the linters (and testing matrix, if applicable)
#
#     # Run all of the linters in a single job
#     - language: 'node_js'
#       node_js: 'lts/*'
#       env: 'Lint'
#       name: 'Lint: salt-lint, yamllint, rubocop, shellcheck & commitlint'
#       before_install: 'skip'
#       script:
#         # Install and run `salt-lint`
#         - pip install --user salt-lint
#         - git ls-files -- '*.sls' '*.jinja' '*.j2' '*.tmpl' '*.tst'
#                         | xargs salt-lint
#         # Install and run `yamllint`
#         # Need at least `v1.17.0` for the `yaml-files` setting
#         - pip install --user yamllint>=1.17.0
#         - yamllint -s .
#         # Install and run `rubocop`
#         - gem install rubocop
#         - rubocop -d
#         # Run `shellcheck` (already pre-installed in Travis)
#         - shellcheck --version
#         - git ls-files -- '*.sh' '*.bash' '*.ksh'
#                         | xargs shellcheck
#         # Install and run `commitlint`
#         - npm i -D @commitlint/config-conventional
#                    @commitlint/travis-cli
#         - commitlint-travis
#
#     # Run `pre-commit` linters in a single job
#     - language: 'python'
#       env: 'Lint_pre-commit'
#       name: 'Lint: pre-commit'
#       before_install: 'skip'
#       cache:
#         directories:
#           - $HOME/.cache/pre-commit
#       script:
#         # Install and run `pre-commit`
#         - pip install pre-commit==2.7.1
#         - pre-commit run --all-files --color always --verbose
#         - pre-commit run --color always --hook-stage manual --verbose commitlint-travis
#
#     ## Define the rest of the matrix based on Kitchen testing
#     # Make sure the instances listed below match up with
#     # the `platforms` defined in `kitchen.yml`
#     - env: INSTANCE=default-debian-10-master-py3
#     # - env: INSTANCE=default-ubuntu-1804-master-py3
#     # - env: INSTANCE=default-centos-8-master-py3
#     # - env: INSTANCE=default-fedora-31-master-py3
#     # - env: INSTANCE=default-opensuse-leap-151-master-py3
#     # - env: INSTANCE=default-amazonlinux-2-master-py3
#     # - env: INSTANCE=default-debian-10-2019-2-py3
#     # - env: INSTANCE=default-debian-9-2019-2-py3
#     - env: INSTANCE=default-ubuntu-1804-2019-2-py3
#     # - env: INSTANCE=default-centos-8-2019-2-py3
#     # - env: INSTANCE=default-fedora-31-2019-2-py3
#     # - env: INSTANCE=default-opensuse-leap-151-2019-2-py3
#     # - env: INSTANCE=default-centos-7-2019-2-py2
#     - env: INSTANCE=default-amazonlinux-2-2019-2-py3
#     # - env: INSTANCE=default-arch-base-latest-2019-2-py2
#     # - env: INSTANCE=default-fedora-30-2018-3-py3
#     # - env: INSTANCE=default-debian-9-2018-3-py2
#     # - env: INSTANCE=default-ubuntu-1604-2018-3-py2
#     - env: INSTANCE=default-centos-7-2018-3-py2
#     - env: INSTANCE=default-opensuse-leap-151-2018-3-py2
#     # - env: INSTANCE=default-amazonlinux-1-2018-3-py2
#     # - env: INSTANCE=default-arch-base-latest-2018-3-py2
#     # - env: INSTANCE=default-debian-8-2017-7-py2
#     # - env: INSTANCE=default-ubuntu-1604-2017-7-py2
#     - env: INSTANCE=default-centos-6-2017-7-py2
#     # - env: INSTANCE=default-fedora-30-2017-7-py2
#     # - env: INSTANCE=default-opensuse-leap-151-2017-7-py2
#     # - env: INSTANCE=default-amazonlinux-1-2017-7-py2
#     # - env: INSTANCE=default-arch-base-latest-2017-7-py2
#
#     ## Define the release stage that runs `semantic-release`
#     - stage: 'release'
#       language: 'node_js'
#       node_js: 'lts/*'
#       env: 'Release'
#       name: 'Run semantic-release inc. file updates to AUTHORS, CHANGELOG & FORMULA'
#       before_install: 'skip'
#       script:
#         # Update `AUTHORS.md`
#         - export MAINTAINER_TOKEN=${GH_TOKEN}
#         - go get github.com/myii/maintainer
#         - maintainer contributor
#
#         # Install all dependencies required for `semantic-release`
#         - npm i -D @semantic-release/changelog@3
#                    @semantic-release/exec@3
#                    @semantic-release/git@7
#       deploy:
#         provider: 'script'
#         # Opt-in to `dpl v2` to complete the Travis build config validation (beta)
#         # * https://docs.travis-ci.com/user/build-config-validation
#         # Deprecated `skip_cleanup` can now be avoided, `cleanup: false` is by default
#         edge: true
#         # Run `semantic-release`
#         script: 'npx semantic-release@15.14'
#
# # Notification options: `always`, `never` or `change`
# notifications:
#   webhooks:
#     if: 'repo = saltstack-formulas/openvpn-formula'
#     urls:
#       - https://saltstack-formulas.zulipchat.com/api/v1/external/travis?api_key=HsIq3o5QmLxdnVCKF9is0FUIpkpAY79P&stream=CI&topic=saltstack-formulas%2Fopenvpn-formula&ignore_pull_requests=true
#     on_success: always  # default: always
#     on_failure: always  # default: always
#     on_start: always    # default: never
#     on_cancel: always   # default: always
#     on_error: always    # default: always
